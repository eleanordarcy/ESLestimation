alpha2  <- 0.9
alpha3 <- 0.4
alpha4 <- 0.3
beta1 <- 0.5
beta2 <- 0.3
beta3 <- 5
par <- c(alpha1, alpha2, alpha3, alpha4, beta1, beta2, beta3)
find_gamma_tau(par, p=4, q=3, tau=1)
gamma_tau <- c()
for(i in 1:10){
gamma_tau[i] <- find_gamma_tau(par, 4, 3, i)
}
plot(1:10, gamma_tau, type='l', xlab=expression(tau), ylab=expression(gamma[tau]),
main=bquote(paste("ARMAX(4,3) with ", alpha[1], " = ", .(alpha1), ', ', alpha[2], " = ", .(alpha2), ', ', alpha[3], " = ", .(alpha3),
', ', alpha[4], " = ", .(alpha4), ', ', beta[1], " = ", .(beta1), ', ', beta[2], " = ", .(beta2), ', ', beta[3], " = ", .(beta3))))
alpha1  <- 0.5
alpha2  <- 0.9
alpha3 <- 0.4
alpha4 <- 0.3
beta1 <- 0.5
beta2 <- 3
beta3 <- 0.5
par <- c(alpha1, alpha2, alpha3, alpha4, beta1, beta2, beta3)
find_gamma_tau(par, p=4, q=3, tau=1)
gamma_tau <- c()
for(i in 1:10){
gamma_tau[i] <- find_gamma_tau(par, 4, 3, i)
}
plot(1:10, gamma_tau, type='l', xlab=expression(tau), ylab=expression(gamma[tau]),
main=bquote(paste("ARMAX(4,3) with ", alpha[1], " = ", .(alpha1), ', ', alpha[2], " = ", .(alpha2), ', ', alpha[3], " = ", .(alpha3),
', ', alpha[4], " = ", .(alpha4), ', ', beta[1], " = ", .(beta1), ', ', beta[2], " = ", .(beta2), ', ', beta[3], " = ", .(beta3))))
alpha1  <- 0.5
alpha2  <- 0.9
alpha3 <- 0.4
alpha4 <- 0.3
beta1 <- 5
beta2 <- 0.3
beta3 <- 0.5
par <- c(alpha1, alpha2, alpha3, alpha4, beta1, beta2, beta3)
find_gamma_tau(par, p=4, q=3, tau=1)
gamma_tau <- c()
for(i in 1:10){
gamma_tau[i] <- find_gamma_tau(par, 4, 3, i)
}
plot(1:10, gamma_tau, type='l', xlab=expression(tau), ylab=expression(gamma[tau]),
main=bquote(paste("ARMAX(4,3) with ", alpha[1], " = ", .(alpha1), ', ', alpha[2], " = ", .(alpha2), ', ', alpha[3], " = ", .(alpha3),
', ', alpha[4], " = ", .(alpha4), ', ', beta[1], " = ", .(beta1), ', ', beta[2], " = ", .(beta2), ', ', beta[3], " = ", .(beta3))))
rm(list=ls())
library(extRemes)
library(evd)
## ARMAX(3,0)
alpha <- c(0.9,0,0.4)#c(0.3^(1/30), 0.95)
beta <- c()
P <- length(alpha)
Q <- length(beta)
# Marginal distribution of residual - gamma -------------------------------
find_gamma <- function(par, n.it, p, q){
alpha <- par[1:p]
beta <- par[(p+1):(p+q)]
nth_element <- c()
sub <- 1:p
for(tau in 1:n.it){
sup <- 0:tau
solutions <- list()
for( j1 in sup ){
for( j2 in sup ){
for( j3 in sup ){
if( sub %*% c(j1,j2,j3) == tau ){
solutions[[length(solutions) + 1]] <- c(j1, j2,j3)
}
}
}
}
S <- c()
for(i in 1:length(solutions)){
S[i] <- alpha[1]^solutions[[i]][1]*alpha[2]^solutions[[i]][2]*alpha[3]^solutions[[i]][3]
}
nth_element[tau] <- max(S)
}
gamma <- (sum(1,nth_element))^(-1)
return(gamma)
}
# Simulate ----------------------------------------------------------------
X <- c()
n <- 11000 #Number of observations to simulate
alpha1 <- alpha[1]
alpha2 <- alpha[2]
alpha3 <- alpha[3]
X <- c() ## Simulations
library(ESLestimation)
## This loads in data from package
data(Lowestoft)
## If user wants to look at model fits
( gpd_par <- GPD.fit(Lowestoft) )
( rate_par <- rateparam.fit(Lowestoft) )
( extremalindex_par <- extremalindex.fit(Lowestoft) )
( RL <- returnlevel.est(0.1, Lowestoft, gpd_par=GPD.fit(Lowestoft), rate_par=rateparam.fit(Lowestoft), extremalindex_par=extremalindex.fit(Lowestoft)) )
setwd("C:/Users/darcye/OneDrive - Lancaster University/phd/Extreme_SL_est/Code/Sea_Levels_Git/ESLestimation")
detach("package:ESLestimation", unload = TRUE)
remove.packages("ESLestimation")
rm(list=ls())
### When changing documentation
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/phd/Extreme_SL_est/Code/Sea_Levels_Git/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
install_github('eleanordarcy/ESL_estimation/ESLestimation')
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
remove.packages("ESLestimation")
### When changing documentation
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/phd/Extreme_SL_est/Code/Sea_Levels_Git/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
library(ESLestimation)
remove.packages("ESLestimation")
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
library(ESLestimation)
remove.packages("ESLestimation")
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/phd/Extreme_SL_est/Code/Sea_Levels_Git/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
remove.packages("ESLestimation")
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/phd/Extreme_SL_est/Code/Sea_Levels_Git/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
library(ESLestimation)
library(devtools)
install_github('eleanordarcy/ESL_estimation/ESLestimation')
library(ESLestimation)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
remove.packages("ESLestimation")
library(devtools)
install_github('eleanordarcy/ESLestimation')
library(ESLestimation)
#'
#' @param data A data frame of skew surge observations (variable named \code{skews}).
#' @param run.length This is the number of consecutive non-exceedances between two extreme observations, where we would say they belong to different clusters (as for the standard runs estimate). The default is 10 (i.e., 5 days) but can be inferred from autocorrelation (acf) plots, i.e., the maximum lag before the acf remains close to zero.
#' @param thresh.quantile The quantile of skew surges above which the exponential decay model is required, i.e., the empirical estimates become noisy above this value. This is a single value between 0 and 1. The default is the 0.99-quantile.
#'
#' @return 2 parameters for the extremal index model fit.
#'
#' @details \loadmathjax{} The \code{extremalindex.fit} consists of two stages.
#' For values below the threshold (defined by \code{thresh.quantile}), the empirical runs estimate is used as this is smooth over skew surges in this range.
#' For computational efficiency purposes, these empirical estimates are evaluated on a regular grid of 100 values from the minimum skew surge up to this threshold.
#' The empirical runs estimate is found using the \code{extRemes} R package.
remove.packages("ESLestimation")
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESLestimation')
remove.packages("ESLestimation")
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
roxygen2::roxygenise()
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESLestimation')
library(ESLestimation)
remove.packages("ESLestimation")
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
roxygen2::roxygenise()
library(roxygen2)
setwd("C:/Users/darcye/OneDrive - Lancaster University/Publications/ESLestimation")
roxygen2::roxygenise()
library(devtools)
install_github('eleanordarcy/ESLestimation')
3
library(ESLestimation)
